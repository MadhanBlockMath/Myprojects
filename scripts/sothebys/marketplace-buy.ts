import { ethers } from "hardhat";
import { BigNumber, utils } from "ethers";
import hre from "hardhat";

async function main() {
  const accounts = await ethers.getSigners();
  // const seller = "0xb7eF4924EB568842EfC04ed147478d5dE602A7cb";
  const seller = accounts[1];
  const buyer = accounts[0];
  const nftAddress = "0xcE927a8a5d863f84deAA1Ea175EED34c4Bf4F535";
  const wethAddress = "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6";

  const networkName = hre.network.name;
  const chainId = hre.network.config.chainId;

  console.log("networkName =", networkName);
  console.log("networkChainId =", chainId);
  //   const platformAddress = "0x0000000000000000000000000000000000000000";
  //   const platformFee = 0;
  //   const priceFeedAddress = "0xe306C1DcCB13e9dB2af5C782ab2e36416C21B43e";
  // goreli = 0xfD92AdCB0edf3bce40C5b1fe9935083D653Ec699
  // matic = 0x6A5870C287D88637fC5436e8Ef000A7D3e62BF44
  const buy = await ethers.getContractAt(
    "market",
    "0xA167BDA7eafCf765AD551C1714124471a9D0c8BA"
  );
  console.log(`Buy Contract deployed to: ${buy.address}`);
  console.log(`seller address: ${seller.address}`);
  console.log(`buyer address: ${buyer.address}`);

  // Approving functionality from ERC721 Contract to Marketplace Contract
  const nftMedia = await ethers.getContractAt(
    "ERC721CreatorImplementation",
    nftAddress
  );

  const approveForAllTx = await nftMedia
    .connect(seller)
    .setApprovalForAll(buy.address, true);
  console.log(`Approve transaction submitted to: ${approveForAllTx.hash}`);
  await approveForAllTx.wait(1);

  // Order Parameters
  const fixedPrice = utils.parseEther("0.3");
  const tax = utils.parseEther(".001");
  const uuid = "b2adc697-f5ab-419e-b2fa-c87a436ed8hc8rn";
  const order = [
    uuid,
    1,
    nftAddress,
    BigNumber.from("1"),
    seller.address,
    fixedPrice,
    wethAddress,
    0,
    ethers.constants.AddressZero,
    0,
    0,
    buyer.address,
  ];

  const param = order.slice(0, 7);
  let signatureparam = [...param,chainId]
      
  const hashedMessage = ethers.utils.solidityKeccak256(
    ["bytes"],
    [
      ethers.utils.solidityPack(
        [
          "string",
          "uint256",
          "address",
          "uint256",
          "address",
          "uint256",
          "address",
          "uint256",
        ],
        signatureparam
      ),
    ]
  );
  console.log(hashedMessage);
  // 0x1fab4cb868f9e969c5cd35f86b879ab21ffbe9d1014b08e65c0c24a7d409c2eb
  // Seller Signature is generated by signing the hash generated
  const sellerSignature = await seller.signMessage(
    ethers.utils.arrayify(hashedMessage)
  );
  console.log(`SellerSignature: ${sellerSignature}`);

  // Approving the WETH to auction house
  const weth = await ethers.getContractAt("WETH", wethAddress);
  const approveTx = await weth
    .connect(buyer)
    .approve(buy.address, utils.parseEther("0.4"));
  console.log(`Approve transaction submitted to: ${approveTx.hash}`);
  await approveTx.wait();
  // const sellerSignature = "0x00fbd052b37368d47c8c4ff1e82de4f7771f2eebe221332c3953079dea0491040d569ea20bea231210b6ecb3d6270d668d2a5f8b9d7dc5d674b543fabc3994601c";
  // Buying the nft via using signature by Buyer
  const txn = await buy.connect(buyer).buy(order, sellerSignature,ethers.constants.AddressZero, {value:fixedPrice });
  console.log(`Buy Creation submitted at: ${txn.hash}`);
  await txn.wait();
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
