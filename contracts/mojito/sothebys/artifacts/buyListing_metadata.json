{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_platformAddress",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "_platformFeePercentage",
						"type": "uint16"
					},
					{
						"internalType": "uint64",
						"name": "_max1155Quantity",
						"type": "uint64"
					},
					{
						"internalType": "contract IPriceFeed",
						"name": "_priceFeedAddress",
						"type": "address"
					},
					{
						"internalType": "contract IRoyaltyEngine",
						"name": "_royaltycontract",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "AdminApproved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "AdminRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenContract",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "string",
								"name": "saleId",
								"type": "string"
							},
							{
								"internalType": "address",
								"name": "tokenOwner",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint64",
								"name": "tokenQuantity",
								"type": "uint64"
							},
							{
								"internalType": "address",
								"name": "buyer",
								"type": "address"
							},
							{
								"internalType": "uint64",
								"name": "quantity",
								"type": "uint64"
							},
							{
								"internalType": "address",
								"name": "paymentToken",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "paymentAmount",
								"type": "uint256"
							}
						],
						"indexed": false,
						"internalType": "struct buyListing.BuyList",
						"name": "buyingDetails",
						"type": "tuple"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "MintedtokenId",
						"type": "uint256[]"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "paymentSettlementAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "taxSettlementAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "platformSettlementAddress",
								"type": "address"
							},
							{
								"internalType": "uint16",
								"name": "platformFeePercentage",
								"type": "uint16"
							},
							{
								"internalType": "address",
								"name": "commissionAddress",
								"type": "address"
							},
							{
								"internalType": "uint16",
								"name": "commissionFeePercentage",
								"type": "uint16"
							}
						],
						"indexed": false,
						"internalType": "struct buyListing.settlementList",
						"name": "paymentSettlement",
						"type": "tuple"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tax",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "paymentAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "excessAmount",
						"type": "uint256"
					}
				],
				"name": "BuyExecuted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "tokenContract",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "RoyaltyPayout",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "nftContractAddress",
								"type": "address"
							},
							{
								"internalType": "uint64",
								"name": "nftStartTokenId",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "nftEndTokenId",
								"type": "uint64"
							},
							{
								"internalType": "uint256",
								"name": "minimumFiatPrice",
								"type": "uint256"
							},
							{
								"internalType": "uint256[]",
								"name": "minimumCryptoPrice",
								"type": "uint256[]"
							},
							{
								"internalType": "address[]",
								"name": "paymentCurrency",
								"type": "address[]"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "paymentSettlementAddress",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "taxSettlementAddress",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "platformSettlementAddress",
										"type": "address"
									},
									{
										"internalType": "uint16",
										"name": "platformFeePercentage",
										"type": "uint16"
									},
									{
										"internalType": "address",
										"name": "commissionAddress",
										"type": "address"
									},
									{
										"internalType": "uint16",
										"name": "commissionFeePercentage",
										"type": "uint16"
									}
								],
								"internalType": "struct buyListing.settlementList",
								"name": "paymentSettlement",
								"type": "tuple"
							},
							{
								"internalType": "uint64",
								"name": "maxCap",
								"type": "uint64"
							},
							{
								"internalType": "enum buyListing.TransactionStatus",
								"name": "transactionStatus",
								"type": "uint8"
							},
							{
								"internalType": "enum buyListing.PaymentStatus",
								"name": "paymentStatus",
								"type": "uint8"
							}
						],
						"indexed": false,
						"internalType": "struct buyListing.PriceList",
						"name": "saleList",
						"type": "tuple"
					}
				],
				"name": "saleClosed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "nftContractAddress",
								"type": "address"
							},
							{
								"internalType": "uint64",
								"name": "nftStartTokenId",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "nftEndTokenId",
								"type": "uint64"
							},
							{
								"internalType": "uint256",
								"name": "minimumFiatPrice",
								"type": "uint256"
							},
							{
								"internalType": "uint256[]",
								"name": "minimumCryptoPrice",
								"type": "uint256[]"
							},
							{
								"internalType": "address[]",
								"name": "paymentCurrency",
								"type": "address[]"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "paymentSettlementAddress",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "taxSettlementAddress",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "platformSettlementAddress",
										"type": "address"
									},
									{
										"internalType": "uint16",
										"name": "platformFeePercentage",
										"type": "uint16"
									},
									{
										"internalType": "address",
										"name": "commissionAddress",
										"type": "address"
									},
									{
										"internalType": "uint16",
										"name": "commissionFeePercentage",
										"type": "uint16"
									}
								],
								"internalType": "struct buyListing.settlementList",
								"name": "paymentSettlement",
								"type": "tuple"
							},
							{
								"internalType": "uint64",
								"name": "maxCap",
								"type": "uint64"
							},
							{
								"internalType": "enum buyListing.TransactionStatus",
								"name": "transactionStatus",
								"type": "uint8"
							},
							{
								"internalType": "enum buyListing.PaymentStatus",
								"name": "paymentStatus",
								"type": "uint8"
							}
						],
						"indexed": false,
						"internalType": "struct buyListing.PriceList",
						"name": "saleList",
						"type": "tuple"
					}
				],
				"name": "saleCreated",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "admin",
						"type": "address"
					}
				],
				"name": "approveAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "saleId",
								"type": "string"
							},
							{
								"internalType": "address",
								"name": "tokenOwner",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint64",
								"name": "tokenQuantity",
								"type": "uint64"
							},
							{
								"internalType": "address",
								"name": "buyer",
								"type": "address"
							},
							{
								"internalType": "uint64",
								"name": "quantity",
								"type": "uint64"
							},
							{
								"internalType": "address",
								"name": "paymentToken",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "paymentAmount",
								"type": "uint256"
							}
						],
						"internalType": "struct buyListing.BuyList",
						"name": "list",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "tax",
						"type": "uint256"
					}
				],
				"name": "buy",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "nftTokenId",
						"type": "uint256[]"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "saleId",
						"type": "string"
					}
				],
				"name": "cancelSale",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "nftContractAddress",
								"type": "address"
							},
							{
								"internalType": "uint64",
								"name": "nftStartTokenId",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "nftEndTokenId",
								"type": "uint64"
							},
							{
								"internalType": "uint256",
								"name": "minimumFiatPrice",
								"type": "uint256"
							},
							{
								"internalType": "uint256[]",
								"name": "minimumCryptoPrice",
								"type": "uint256[]"
							},
							{
								"internalType": "address[]",
								"name": "paymentCurrency",
								"type": "address[]"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "paymentSettlementAddress",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "taxSettlementAddress",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "platformSettlementAddress",
										"type": "address"
									},
									{
										"internalType": "uint16",
										"name": "platformFeePercentage",
										"type": "uint16"
									},
									{
										"internalType": "address",
										"name": "commissionAddress",
										"type": "address"
									},
									{
										"internalType": "uint16",
										"name": "commissionFeePercentage",
										"type": "uint16"
									}
								],
								"internalType": "struct buyListing.settlementList",
								"name": "paymentSettlement",
								"type": "tuple"
							},
							{
								"internalType": "uint64",
								"name": "maxCap",
								"type": "uint64"
							},
							{
								"internalType": "enum buyListing.TransactionStatus",
								"name": "transactionStatus",
								"type": "uint8"
							},
							{
								"internalType": "enum buyListing.PaymentStatus",
								"name": "paymentStatus",
								"type": "uint8"
							}
						],
						"internalType": "struct buyListing.PriceList",
						"name": "list",
						"type": "tuple"
					},
					{
						"internalType": "string",
						"name": "saleId",
						"type": "string"
					}
				],
				"name": "createSale",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAdmins",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "admins",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "saleId",
						"type": "string"
					}
				],
				"name": "getListingPrice",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "minimumCryptoPrice",
						"type": "uint256[]"
					},
					{
						"internalType": "address[]",
						"name": "paymentCurrency",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "saleId",
						"type": "string"
					}
				],
				"name": "getSettlementAddressBps",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "_platformFeePercentage",
						"type": "uint16"
					},
					{
						"internalType": "address",
						"name": "_platformSettlementAddress",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "_commissionFeePercentage",
						"type": "uint16"
					},
					{
						"internalType": "address",
						"name": "_commissionAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "paymentSettlementAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "taxSettlementAddress",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "admin",
						"type": "address"
					}
				],
				"name": "isAdmin",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"name": "listings",
				"outputs": [
					{
						"internalType": "address",
						"name": "nftContractAddress",
						"type": "address"
					},
					{
						"internalType": "uint64",
						"name": "nftStartTokenId",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "nftEndTokenId",
						"type": "uint64"
					},
					{
						"internalType": "uint256",
						"name": "minimumFiatPrice",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "paymentSettlementAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "taxSettlementAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "platformSettlementAddress",
								"type": "address"
							},
							{
								"internalType": "uint16",
								"name": "platformFeePercentage",
								"type": "uint16"
							},
							{
								"internalType": "address",
								"name": "commissionAddress",
								"type": "address"
							},
							{
								"internalType": "uint16",
								"name": "commissionFeePercentage",
								"type": "uint16"
							}
						],
						"internalType": "struct buyListing.settlementList",
						"name": "paymentSettlement",
						"type": "tuple"
					},
					{
						"internalType": "uint64",
						"name": "maxCap",
						"type": "uint64"
					},
					{
						"internalType": "enum buyListing.TransactionStatus",
						"name": "transactionStatus",
						"type": "uint8"
					},
					{
						"internalType": "enum buyListing.PaymentStatus",
						"name": "paymentStatus",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "max1155Quantity",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "platformAddress",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "platformFeePercentage",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "priceFeedAddress",
				"outputs": [
					{
						"internalType": "contract IPriceFeed",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "admin",
						"type": "address"
					}
				],
				"name": "revokeAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "royaltySupport",
				"outputs": [
					{
						"internalType": "contract IRoyaltyEngine",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"name": "tokensUsed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "saleId",
						"type": "string"
					},
					{
						"internalType": "enum buyListing.PaymentStatus",
						"name": "paymentStatus",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "minimumFiatPrice",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "minimumCryptoPrice",
						"type": "uint256[]"
					},
					{
						"internalType": "address[]",
						"name": "paymentCurrency",
						"type": "address[]"
					}
				],
				"name": "updatePayment",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_platformAddress",
						"type": "address"
					}
				],
				"name": "updatePlatformAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "_platformFeePercentage",
						"type": "uint16"
					}
				],
				"name": "updatePlatformFeePercentage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pricefeed",
						"type": "address"
					}
				],
				"name": "updatePricefeedContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "royaltyContract",
						"type": "address"
					}
				],
				"name": "updateRoyaltyContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "_max1155Quantity",
						"type": "uint64"
					}
				],
				"name": "updatemax1155Quantity",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "saleId",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "_paymentSettlementAddress",
						"type": "address"
					}
				],
				"name": "updatepaymentSettlementAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "saleId",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "_taxSettlementAddress",
						"type": "address"
					}
				],
				"name": "updatetaxSettlementAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"events": {
				"BuyExecuted(address,(string,address,uint256,uint64,address,uint64,address,uint256),uint256[],(address,address,address,uint16,address,uint16),uint256,uint256,uint256)": {
					"params": {
						"MintedtokenId": "consist of token minted Id details",
						"buyingDetails": "consist of buyer details",
						"paymentAmount": "total amount paid by buyer",
						"paymentSettlement": "consist og settlement addresses and payment Percetage",
						"tax": "paid to the taxsettlement Address",
						"tokenContract": "The NFT Contract address"
					}
				},
				"RoyaltyPayout(address,uint256,address,uint256)": {
					"params": {
						"amount": "Amount sent to the royalty recipient address",
						"recipient": "Address of the Royalty Recipient",
						"tokenContract": "The NFT Contract address",
						"tokenId": "The NFT tokenId"
					}
				},
				"saleClosed((address,uint64,uint64,uint256,uint256[],address[],(address,address,address,uint16,address,uint16),uint64,uint8,uint8))": {
					"params": {
						"saleList": "contains the details of cancelled sale"
					}
				},
				"saleCreated((address,uint64,uint64,uint256,uint256[],address[],(address,address,address,uint16,address,uint16),uint64,uint8,uint8))": {
					"params": {
						"saleList": "contains the details of sale created"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"approveAdmin(address)": {
					"details": "See {IAdminControl-approveAdmin}."
				},
				"buy((string,address,uint256,uint64,address,uint64,address,uint256),uint256)": {
					"params": {
						"list": "gives the listing details to buy the nfts",
						"tax": "the amount of tax to be paid by the buyer"
					}
				},
				"cancelSale(string)": {
					"params": {
						"saleId": "to cancel the sale"
					}
				},
				"constructor": {
					"params": {
						"_max1155Quantity": "The max quantity we support for 1155 Nfts",
						"_platformAddress": "The Platform Address",
						"_platformFeePercentage": "The Platform fee percentage",
						"_priceFeedAddress": "the address of the pricefeed",
						"_royaltycontract": "the address to get the royalty data"
					}
				},
				"createSale((address,uint64,uint64,uint256,uint256[],address[],(address,address,address,uint16,address,uint16),uint64,uint8,uint8),string)": {
					"params": {
						"list": "gives the listing details to create a sale",
						"saleId": "consist of the id of the listed sale"
					}
				},
				"getAdmins()": {
					"details": "See {IAdminControl-getAdmins}."
				},
				"getListingPrice(string)": {
					"params": {
						"saleId": "to get the details of sale"
					}
				},
				"getSettlementAddressBps(string)": {
					"params": {
						"saleId": "to get the payment details"
					}
				},
				"isAdmin(address)": {
					"details": "See {IAdminControl-isAdmin}."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"revokeAdmin(address)": {
					"details": "See {IAdminControl-revokeAdmin}."
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"updatePayment(string,uint8,uint256,uint256[],address[])": {
					"params": {
						"minimumCryptoPrice": "the prices of the crypto currencies",
						"minimumFiatPrice": "the amount in USD to be updated",
						"paymentCurrency": "the supported currencies we support in ERC20/ETH",
						"paymentStatus": "the status of the payment",
						"saleId": "The sale id of the supported sale"
					}
				},
				"updatePlatformAddress(address)": {
					"params": {
						"_platformAddress": "The Platform Address"
					}
				},
				"updatePlatformFeePercentage(uint16)": {
					"params": {
						"_platformFeePercentage": "The Platform fee percentage"
					}
				},
				"updatePricefeedContract(address)": {
					"params": {
						"pricefeed": "The contract intracts to get the chainlink feeded price"
					}
				},
				"updateRoyaltyContract(address)": {
					"params": {
						"royaltyContract": "The contract intracts to get the royalty fee"
					}
				},
				"updatemax1155Quantity(uint64)": {
					"params": {
						"_max1155Quantity": "maxQuantity we support for 1155 NFTs"
					}
				},
				"updatepaymentSettlementAddress(string,address)": {
					"params": {
						"_paymentSettlementAddress": "The address of paymentSettlement",
						"saleId": "supported saleId"
					}
				},
				"updatetaxSettlementAddress(string,address)": {
					"params": {
						"_taxSettlementAddress": "The address of taxSettlement",
						"saleId": "supported saleId"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"BuyExecuted(address,(string,address,uint256,uint64,address,uint64,address,uint256),uint256[],(address,address,address,uint16,address,uint16),uint256,uint256,uint256)": {
					"notice": "Emitted when an Buy Event is completed"
				},
				"RoyaltyPayout(address,uint256,address,uint256)": {
					"notice": "Emitted when an Royalty Payout is executed"
				},
				"saleClosed((address,uint64,uint64,uint256,uint256[],address[],(address,address,address,uint16,address,uint16),uint64,uint8,uint8))": {
					"notice": "Emitted when sale is closed"
				},
				"saleCreated((address,uint64,uint64,uint256,uint256[],address[],(address,address,address,uint16,address,uint16),uint64,uint8,uint8))": {
					"notice": "Emitted when sale is created"
				}
			},
			"kind": "user",
			"methods": {
				"buy((string,address,uint256,uint64,address,uint64,address,uint256),uint256)": {
					"notice": "End an sale, finalizing and paying out the respective parties."
				},
				"cancelSale(string)": {
					"notice": "cancel the sale of a listed token"
				},
				"createSale((address,uint64,uint64,uint256,uint256[],address[],(address,address,address,uint16,address,uint16),uint64,uint8,uint8),string)": {
					"notice": "creating a batch sales using batch details ."
				},
				"getListingPrice(string)": {
					"notice": "get the listings currency and price"
				},
				"getSettlementAddressBps(string)": {
					"notice": "payment details of the supported sale"
				},
				"updatePayment(string,uint8,uint256,uint256[],address[])": {
					"notice": "Update the payment"
				},
				"updatePlatformAddress(address)": {
					"notice": "Update the platform Address"
				},
				"updatePlatformFeePercentage(uint16)": {
					"notice": "Update the Platform Fee Percentage"
				},
				"updatePricefeedContract(address)": {
					"notice": "Update the pricefeed contract address"
				},
				"updateRoyaltyContract(address)": {
					"notice": "Update the royalty contract address"
				},
				"updatemax1155Quantity(uint64)": {
					"notice": "Update the max quantity for 1155 NFTs"
				},
				"updatepaymentSettlementAddress(string,address)": {
					"notice": "Update the paymentSettlementAddress"
				},
				"updatetaxSettlementAddress(string,address)": {
					"notice": "Update the taxSettlementAddress"
				},
				"withdraw()": {
					"notice": "Withdraw the funds to owner"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/mojito/sothebys/buy.sol": "buyListing"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/manifold/creator-core/core/CreatorCore.sol": {
			"keccak256": "0x45c931cb41ef365ecb1c953fc75cf43546e80f05555090a8e2f65a854d9d65d9",
			"license": "MIT",
			"urls": [
				"bzz-raw://ca74abab601a9158c00ea96a701b4b92a1c3da580f7c6728864d2223c44cf078",
				"dweb:/ipfs/QmXfLTL9WxVhtmcmJ7vW3SFxBEzMbfSqtx9prdoKUPJhAZ"
			]
		},
		"contracts/manifold/creator-core/core/ICreatorCore.sol": {
			"keccak256": "0x61a300259ca1484e05b04ece0acc97b9dbf5fbdd7b3d20a6892d8a1d3052362f",
			"license": "MIT",
			"urls": [
				"bzz-raw://59981fee263486519a6e698f4f8ad5ee8af7c0668aee8bf335d285a06c3b02bb",
				"dweb:/ipfs/QmabGX8ERpimg3K8w5uSbVqdLXMo6fgizMmVyPPXazmJco"
			]
		},
		"contracts/manifold/creator-core/core/IERC1155CreatorCore.sol": {
			"keccak256": "0xc91d0050b622fbb41b7516c6a8c75ab6236e6a52feab681d36fb75b8b49fc8c0",
			"license": "MIT",
			"urls": [
				"bzz-raw://f045081bb40c91837c076530bb07b9f8b7fa77cbd1191748a12920f01f1678f8",
				"dweb:/ipfs/QmP5kx53wBz2eUqZV26ttYJmsHP7R9n3rF6dAbTjVPh5gL"
			]
		},
		"contracts/manifold/creator-core/core/IERC721CreatorCore.sol": {
			"keccak256": "0xf4f06a129d0081c2d6b2decc23ef16dccf4b723822ca64ab520f56b71fd16f6c",
			"license": "MIT",
			"urls": [
				"bzz-raw://3245738f14c48cd85b268394e540fc3b611926240d3eaaf5e5b917a26b36120c",
				"dweb:/ipfs/QmRWLPJ72CWgNnq6THvhp427gNjSS5yUTtSkGwLXQDBeUJ"
			]
		},
		"contracts/manifold/creator-core/extensions/ICreatorExtensionTokenURI.sol": {
			"keccak256": "0xe9aaf27297da3fde02e631e9d0b2e57fe93351d7909e8dfb656a3324b64c6f04",
			"license": "MIT",
			"urls": [
				"bzz-raw://addc967bceea45a7190a5cb49d3f278f45caf3149039869da219de2a0d4085cf",
				"dweb:/ipfs/QmVM3boH9F8JQewzNhFwAubqACYb1CjjQx9ppEoDntHico"
			]
		},
		"contracts/manifold/libraries-solidity/access/AdminControl.sol": {
			"keccak256": "0xb68b61908cd18eba910850227ccf473343ef4eda3bae2d0c9a74d3dc7323b51e",
			"license": "MIT",
			"urls": [
				"bzz-raw://602561a7124fd337ad20157f04e5f8c615601e3e374485deb37ae02902de4420",
				"dweb:/ipfs/QmP2VkTq5BTK3GNocQH4otfTbazq1VictwGR5rnpRzJk66"
			]
		},
		"contracts/manifold/libraries-solidity/access/IAdminControl.sol": {
			"keccak256": "0x13addc422ab45458b8ef38088ca34f8f788d94d946578f0576e2f2ddb3d9cde1",
			"license": "MIT",
			"urls": [
				"bzz-raw://5aa10662ce262820ff173773f8a5f78ef0e2ba8aaf328804c3fe6903e43b7782",
				"dweb:/ipfs/QmctJDefviJUDmj2jQAAD3esgTyBrrxt3W1d6eGToAShjP"
			]
		},
		"contracts/mojito/sothebys/buy.sol": {
			"keccak256": "0x0c901b0a27726cc63d9cde50c789513bf039a74c80a0f9bc8eb04a9f1fa774bc",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://f2111234919b58d797f3fa89b3974e6dcf12d03b75bc53c1770479d56948f532",
				"dweb:/ipfs/QmQd7EFDTpWyTWZTKWAzVmFrsxASdh9DXC4eHWt8tuqGNz"
			]
		},
		"contracts/openzeppelin-upgradeable/utils/AddressUpgradeable.sol": {
			"keccak256": "0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8",
			"license": "MIT",
			"urls": [
				"bzz-raw://e51755c6934703b61e7edb7d3edef985f429be6bef384b15e1b616ea65176934",
				"dweb:/ipfs/QmQVb4hBJcTMthp5hJquUy5tPsDwgiKQ8nGExckR75G88u"
			]
		},
		"contracts/openzeppelin/access/Ownable.sol": {
			"keccak256": "0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c",
			"license": "MIT",
			"urls": [
				"bzz-raw://d5ff16b336ce8f906478d5f2eecc6435e00833bdc0b92f6b209cf9e92cb5b2b7",
				"dweb:/ipfs/QmRD1rAZEqQ73C33cdA3QoUyBDMEWnNKNMc6PNkAZWHeQQ"
			]
		},
		"contracts/openzeppelin/security/ReentrancyGuard.sol": {
			"keccak256": "0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe",
			"license": "MIT",
			"urls": [
				"bzz-raw://b9989233808b8f475395f71ea757e277fa167cdac8a24d10f9784783defd313c",
				"dweb:/ipfs/Qmdg6rbPsShpnzvqKmPVuFk7eYU53oXTPxqUJXd9WLD4vg"
			]
		},
		"contracts/openzeppelin/token/ERC1155/IERC1155.sol": {
			"keccak256": "0xf920acc579a6c2067ca587b8d3993f6e737ac54f2dc3c4cd179d8df0e3f351d9",
			"license": "MIT",
			"urls": [
				"bzz-raw://900486cb37c3b173462e4d5929a7df08ef91d9ee544176cfa25189f3b556641e",
				"dweb:/ipfs/QmTMbsipusiSnqiUj9wnPjwdzUALoKhmVGRhhcYn36jGJg"
			]
		},
		"contracts/openzeppelin/token/ERC20/IERC20.sol": {
			"keccak256": "0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7",
			"license": "MIT",
			"urls": [
				"bzz-raw://4cb252ec7657ba7a91be688cbd263090aa5379e504f488a62d06198e0d630322",
				"dweb:/ipfs/QmW56fDiDirhWfWiKrycXE5UY6tTNtFrYx39ipnSs8mkYb"
			]
		},
		"contracts/openzeppelin/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519",
			"license": "MIT",
			"urls": [
				"bzz-raw://4082ea29d4cab3998038c2c5e37ed990e009a6d8814bbe82931173db7b6e63d5",
				"dweb:/ipfs/QmaAwSn8ubftkwEYP3iU14f8VP7texzjWDXbopEEvm8LQF"
			]
		},
		"contracts/openzeppelin/token/ERC721/IERC721.sol": {
			"keccak256": "0x872ba21af7c1f0ae04a715beca31e8fcac764d6c8762940b0fe1bfb6ed8e86f4",
			"license": "MIT",
			"urls": [
				"bzz-raw://497017741d74878b56a67ad51e98061bd9ec0e6e4fdbfef0e2ab51523f4c16de",
				"dweb:/ipfs/QmWfkpRHksy8jFywqYxdmMqdkQ1hxrGTPoNBXbZ48zTvyv"
			]
		},
		"contracts/openzeppelin/utils/Address.sol": {
			"keccak256": "0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656",
			"license": "MIT",
			"urls": [
				"bzz-raw://7c455cda07c5f8978c57e545ddde382552d3a55b6e3682e0f809ed07ec7defbe",
				"dweb:/ipfs/QmXkoKbxyMcMzjYdkXi5t4t3ZjBQ81pj7AaanS9jhePxyt"
			]
		},
		"contracts/openzeppelin/utils/Context.sol": {
			"keccak256": "0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3",
			"license": "MIT",
			"urls": [
				"bzz-raw://4fd625dca17657403af518cc6c8ab5c54c58898cf6e912ca2e1b0f3194ad0405",
				"dweb:/ipfs/QmQVv7YeeKmaS11bg7YDTeeGDk6i7sV8LMMfohaLM4SiRu"
			]
		},
		"contracts/openzeppelin/utils/Strings.sol": {
			"keccak256": "0x5fa25f305839292fab713256214f2868e0257d29826b14282bbd7f1e34f5af38",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3de4074848249e00e1336db857e3fa8f78b4fe11d4a887f71050c22023b2132",
				"dweb:/ipfs/QmbL6k2zFGndQPNPG7vCDivtjKam3quJSrEbRuVsNo4hBw"
			]
		},
		"contracts/openzeppelin/utils/introspection/ERC165.sol": {
			"keccak256": "0x905cd0ecd91d1de79a4679d745b79cf852ca8ccda5d25d1c49c6bd17a5edc0cf",
			"license": "MIT",
			"urls": [
				"bzz-raw://8dd1601fcd370546d8c06ea1902d7e7364fc490fbf0ebc3004230ef1f5db473c",
				"dweb:/ipfs/Qmb8zbC3TjWFtcuyP3KEEaegMkPcfeKAcPrwzvkAoMR3cZ"
			]
		},
		"contracts/openzeppelin/utils/introspection/ERC165Checker.sol": {
			"keccak256": "0x66980e12b7591ded37b4f39ab2fae3d71f7414ee79795b37c2ae4bbc249298ed",
			"license": "MIT",
			"urls": [
				"bzz-raw://e37200b736c9ba504a42a78d8627fb3a2869e9d3af99b1817499fc9f48742477",
				"dweb:/ipfs/QmUx7hZV18VLQwynsDUerQ3QasbtTgvsuwAHqL83shN8KS"
			]
		},
		"contracts/openzeppelin/utils/introspection/IERC165.sol": {
			"keccak256": "0x6aa521718bf139b44ce56f194f6aea1d590cacef995b5a84703fb1579fa49be9",
			"license": "MIT",
			"urls": [
				"bzz-raw://100f8d367b5e94eb9cb991914f1de133cf272654c0708faa893bbc17a5b35b93",
				"dweb:/ipfs/QmZeBojmgXq821dL1TJKFb58B1FogM9jL3u7hXQ8hTEBKT"
			]
		},
		"contracts/openzeppelin/utils/structs/EnumerableSet.sol": {
			"keccak256": "0xfac19be5f0d198ac556731a5589a4ae1c0c1622437d0b6b53b2cf3f317071acd",
			"license": "MIT",
			"urls": [
				"bzz-raw://0c0f5ca56c1bfe37e9a9911140681e98c360f9fd225d06fcf2c607169ac76b3b",
				"dweb:/ipfs/QmZYRcvZqTiLcgGRx66RceXNwWqeUS5bDQGNo1gS3hhwec"
			]
		}
	},
	"version": 1
}